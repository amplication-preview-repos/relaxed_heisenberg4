/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CmsContent } from "./CmsContent";
import { CmsContentCountArgs } from "./CmsContentCountArgs";
import { CmsContentFindManyArgs } from "./CmsContentFindManyArgs";
import { CmsContentFindUniqueArgs } from "./CmsContentFindUniqueArgs";
import { CreateCmsContentArgs } from "./CreateCmsContentArgs";
import { UpdateCmsContentArgs } from "./UpdateCmsContentArgs";
import { DeleteCmsContentArgs } from "./DeleteCmsContentArgs";
import { Language } from "../../language/base/Language";
import { CmsContentService } from "../cmsContent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CmsContent)
export class CmsContentResolverBase {
  constructor(
    protected readonly service: CmsContentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CmsContent",
    action: "read",
    possession: "any",
  })
  async _cmsContentsMeta(
    @graphql.Args() args: CmsContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CmsContent])
  @nestAccessControl.UseRoles({
    resource: "CmsContent",
    action: "read",
    possession: "any",
  })
  async cmsContents(
    @graphql.Args() args: CmsContentFindManyArgs
  ): Promise<CmsContent[]> {
    return this.service.cmsContents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CmsContent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CmsContent",
    action: "read",
    possession: "own",
  })
  async cmsContent(
    @graphql.Args() args: CmsContentFindUniqueArgs
  ): Promise<CmsContent | null> {
    const result = await this.service.cmsContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CmsContent)
  @nestAccessControl.UseRoles({
    resource: "CmsContent",
    action: "create",
    possession: "any",
  })
  async createCmsContent(
    @graphql.Args() args: CreateCmsContentArgs
  ): Promise<CmsContent> {
    return await this.service.createCmsContent({
      ...args,
      data: {
        ...args.data,

        language: args.data.language
          ? {
              connect: args.data.language,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CmsContent)
  @nestAccessControl.UseRoles({
    resource: "CmsContent",
    action: "update",
    possession: "any",
  })
  async updateCmsContent(
    @graphql.Args() args: UpdateCmsContentArgs
  ): Promise<CmsContent | null> {
    try {
      return await this.service.updateCmsContent({
        ...args,
        data: {
          ...args.data,

          language: args.data.language
            ? {
                connect: args.data.language,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CmsContent)
  @nestAccessControl.UseRoles({
    resource: "CmsContent",
    action: "delete",
    possession: "any",
  })
  async deleteCmsContent(
    @graphql.Args() args: DeleteCmsContentArgs
  ): Promise<CmsContent | null> {
    try {
      return await this.service.deleteCmsContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Language, {
    nullable: true,
    name: "language",
  })
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "read",
    possession: "any",
  })
  async getLanguage(
    @graphql.Parent() parent: CmsContent
  ): Promise<Language | null> {
    const result = await this.service.getLanguage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
