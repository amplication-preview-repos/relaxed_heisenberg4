/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { LanguageService } from "../language.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LanguageCreateInput } from "./LanguageCreateInput";
import { Language } from "./Language";
import { LanguageFindManyArgs } from "./LanguageFindManyArgs";
import { LanguageWhereUniqueInput } from "./LanguageWhereUniqueInput";
import { LanguageUpdateInput } from "./LanguageUpdateInput";
import { LeadFindManyArgs } from "../../lead/base/LeadFindManyArgs";
import { Lead } from "../../lead/base/Lead";
import { LeadWhereUniqueInput } from "../../lead/base/LeadWhereUniqueInput";
import { CmsContentFindManyArgs } from "../../cmsContent/base/CmsContentFindManyArgs";
import { CmsContent } from "../../cmsContent/base/CmsContent";
import { CmsContentWhereUniqueInput } from "../../cmsContent/base/CmsContentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class LanguageControllerBase {
  constructor(
    protected readonly service: LanguageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Language })
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createLanguage(
    @common.Body() data: LanguageCreateInput
  ): Promise<Language> {
    return await this.service.createLanguage({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Language] })
  @ApiNestedQuery(LanguageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async languages(@common.Req() request: Request): Promise<Language[]> {
    const args = plainToClass(LanguageFindManyArgs, request.query);
    return this.service.languages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Language })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async language(
    @common.Param() params: LanguageWhereUniqueInput
  ): Promise<Language | null> {
    const result = await this.service.language({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        code: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Language })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateLanguage(
    @common.Param() params: LanguageWhereUniqueInput,
    @common.Body() data: LanguageUpdateInput
  ): Promise<Language | null> {
    try {
      return await this.service.updateLanguage({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          code: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Language })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteLanguage(
    @common.Param() params: LanguageWhereUniqueInput
  ): Promise<Language | null> {
    try {
      return await this.service.deleteLanguage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          code: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/leads")
  @ApiNestedQuery(LeadFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Lead",
    action: "read",
    possession: "any",
  })
  async findLeads(
    @common.Req() request: Request,
    @common.Param() params: LanguageWhereUniqueInput
  ): Promise<Lead[]> {
    const query = plainToClass(LeadFindManyArgs, request.query);
    const results = await this.service.findLeads(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        phone: true,
        geography: true,
        modeOfContact: true,
        company: true,

        language: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leads")
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "update",
    possession: "any",
  })
  async connectLeads(
    @common.Param() params: LanguageWhereUniqueInput,
    @common.Body() body: LeadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leads: {
        connect: body,
      },
    };
    await this.service.updateLanguage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leads")
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "update",
    possession: "any",
  })
  async updateLeads(
    @common.Param() params: LanguageWhereUniqueInput,
    @common.Body() body: LeadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leads: {
        set: body,
      },
    };
    await this.service.updateLanguage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leads")
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "update",
    possession: "any",
  })
  async disconnectLeads(
    @common.Param() params: LanguageWhereUniqueInput,
    @common.Body() body: LeadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leads: {
        disconnect: body,
      },
    };
    await this.service.updateLanguage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cmsContents")
  @ApiNestedQuery(CmsContentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CmsContent",
    action: "read",
    possession: "any",
  })
  async findCmsContents(
    @common.Req() request: Request,
    @common.Param() params: LanguageWhereUniqueInput
  ): Promise<CmsContent[]> {
    const query = plainToClass(CmsContentFindManyArgs, request.query);
    const results = await this.service.findCmsContents(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        body: true,

        language: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cmsContents")
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "update",
    possession: "any",
  })
  async connectCmsContents(
    @common.Param() params: LanguageWhereUniqueInput,
    @common.Body() body: CmsContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cmsContents: {
        connect: body,
      },
    };
    await this.service.updateLanguage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cmsContents")
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "update",
    possession: "any",
  })
  async updateCmsContents(
    @common.Param() params: LanguageWhereUniqueInput,
    @common.Body() body: CmsContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cmsContents: {
        set: body,
      },
    };
    await this.service.updateLanguage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cmsContents")
  @nestAccessControl.UseRoles({
    resource: "Language",
    action: "update",
    possession: "any",
  })
  async disconnectCmsContents(
    @common.Param() params: LanguageWhereUniqueInput,
    @common.Body() body: CmsContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cmsContents: {
        disconnect: body,
      },
    };
    await this.service.updateLanguage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
